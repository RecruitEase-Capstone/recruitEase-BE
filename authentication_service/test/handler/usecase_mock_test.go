// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/auth_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/auth_usecase.go -destination=test/handler/usecase_mock_test.go -package=handler_test
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	reflect "reflect"

	v1 "github.com/RecruitEase-Capstone/recruitEase-BE/pkg/proto/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthUsecase is a mock of IAuthUsecase interface.
type MockIAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUsecaseMockRecorder
	isgomock struct{}
}

// MockIAuthUsecaseMockRecorder is the mock recorder for MockIAuthUsecase.
type MockIAuthUsecaseMockRecorder struct {
	mock *MockIAuthUsecase
}

// NewMockIAuthUsecase creates a new mock instance.
func NewMockIAuthUsecase(ctrl *gomock.Controller) *MockIAuthUsecase {
	mock := &MockIAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockIAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUsecase) EXPECT() *MockIAuthUsecaseMockRecorder {
	return m.recorder
}

// UserLogin mocks base method.
func (m *MockIAuthUsecase) UserLogin(ctx context.Context, req *v1.LoginRequest) (*v1.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, req)
	ret0, _ := ret[0].(*v1.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockIAuthUsecaseMockRecorder) UserLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockIAuthUsecase)(nil).UserLogin), ctx, req)
}

// UserRegister mocks base method.
func (m *MockIAuthUsecase) UserRegister(ctx context.Context, req *v1.RegisterRequest) (*v1.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, req)
	ret0, _ := ret[0].(*v1.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockIAuthUsecaseMockRecorder) UserRegister(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockIAuthUsecase)(nil).UserRegister), ctx, req)
}
